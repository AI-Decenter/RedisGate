name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-check-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up environment
        run: |
          echo "SQLX_OFFLINE=true" >> $GITHUB_ENV

      - name: Check code
        run: cargo check --all-targets --all-features

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: redisgate_dev_password
          POSTGRES_USER: redisgate_dev
          POSTGRES_DB: redisgate_dev
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up environment
        run: |
          echo "DATABASE_URL=postgresql://redisgate_dev:redisgate_dev_password@localhost:5432/redisgate_dev" >> $GITHUB_ENV

      - name: Run migrations
        run: |
          cargo install sqlx-cli --no-default-features --features native-tls,postgres
          sqlx migrate run

      - name: Run tests
        run: cargo test --all-features

  integration-tests:
    name: Python Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: redisgate_dev_password
          POSTGRES_USER: redisgate_dev
          POSTGRES_DB: redisgate_dev
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Kubernetes (minikube)
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          # Install minikube
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          rm minikube-linux-amd64
          
          # Start minikube
          minikube start --driver=docker --kubernetes-version=v1.28.0
          
          # Enable required addons
          minikube addons enable ingress
          minikube addons enable metrics-server
          
          # Verify cluster is running
          kubectl cluster-info
          kubectl get nodes

      - name: Set up environment
        run: |
          echo "DATABASE_URL=postgresql://redisgate_dev:redisgate_dev_password@localhost:5432/redisgate_dev" >> $GITHUB_ENV
          echo "KUBERNETES_AVAILABLE=true" >> $GITHUB_ENV

      - name: Install sqlx-cli and run migrations
        run: |
          cargo install sqlx-cli --no-default-features --features native-tls,postgres
          sqlx migrate run

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: tests/integration/.venv
          key: ${{ runner.os }}-python-${{ hashFiles('tests/integration/requirements.txt') }}

      - name: Run integration test setup validation
        working-directory: tests/integration
        run: |
          python run_tests.py --install-deps --mode ci --verbose --report
        continue-on-error: true

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: |
            tests/integration/reports/
            tests/integration/.pytest_cache/
          retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [check, test]
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
        profile: [dev, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-${{ matrix.profile }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: |
          if [ "${{ matrix.profile }}" = "release" ]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --target ${{ matrix.target }}
          fi

      - name: Upload binary artifact
        if: matrix.profile == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: redisgate-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/redisgate
          retention-days: 30

